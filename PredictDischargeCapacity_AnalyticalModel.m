function DoDf = PredictDischargeCapacity_AnalyticalModel(CathodeType, AnodeType, param, I, Lc, epsc, La, epsa)% % DoDf =PredictDischargeCapacity_AnalyticalModel(CathodeType, AnodeType,...%       param, I, Lc, epsc)%     or % DoDf =PredictDischargeCapacity_AnalyticalModel(CathodeType, AnodeType,...%       param, I, Lc, epsc, La, epsa)% calculates the normalized galvanostatic discharge capacity (or DoDf) % of battery cells using the analytical model described in:%     "A Quantitative Analytical Model for Predicting and Optimizing the %      Rate Performance of Battery Cells", Fan Wang and Ming Tang,%      arXiv:2004.10707 (2020)%% Input arguments:%     CathodeType - Type of cathode: 'UR' (uniform reaction, e.g. NMC) %                                    'MZR' (moving zone reaction, e.g. LFP)%     AnodeType - Type of anode: 'Li' (Li metal, use this for half cells)%                                'UR' (uniform reaction, e.g. graphite)%                                'MZR' (moving zone reaction, e.g. LTO)%     param - Matlab structure array containing cell parameter values.%             See 'NMC_Graphite_CellParameters.m' for an example.%     I     - Applied discharge current density (unit: A/m^2)%     Lc    - Cathode thickness (unit: m). %     epsc  - Cathode porosity. %     La    - Anode thickness (unit: m). Optional input used for full %             cells (AnodeType = 'UR' or 'MZR')%     epsa  - Anode porosity. Optional input used for full cells%             (AnodeType = 'UR' or 'MZR')%     Lc, epsc, La and epsa can be arrays and should have the same size. %% Created by: Fan Wang and Ming Tang %             Department of Materials Science & NanoEngineering %             Rice University, Houston, TX, USA% Contact: mingtang@rice.edu% Date: 08/04/2020% Read cell parameters from inputF = param.F; Damb = param.Damb;c0 = param.c0;tLi = param.tLi;Ls = param.Ls;epss = param.epss;tauc = param.tauc(epsc);taus = param.taus(epss);csmaxc = param.csmaxc;cs0c = param.cs0c;if ~isequal(size(epsc), size(Lc))    error('epsc and Lc are not the same size.');endif isequal(AnodeType,'UR') || isequal(AnodeType,'MZR')  % full cell    if nargin < 8        error('Not enough inputs.');    else        if ~isequal(size(La), size(Lc))            error('La and Lc are not the same size.');        elseif ~isequal(size(epsa), size(Lc))             error('epsa and Lc are not the same size.');        end        cs0a = param.cs0a;         taua = param.taua(epsa);    endend% Calculate the penetration depth Lpzswitch AnodeType    case 'Li'  % half cell with Li metal anode        switch CathodeType            case 'UR'  % UR-type cathode, e.g. NMC                Lpz = -3/2*epss./epsc.*Ls+sqrt(...                    6*F*Damb*c0/(1-tLi)./tauc./I.*(epsc.*Lc+epss.*Ls)+...                    (9/4*epss.^2./epsc.^2-3*taus./tauc).*Ls.^2);            case 'MZR'  % MZR-type cathode, e.g. LFP                Lpz = -epss./epsc.*Ls+sqrt(...                    2*F*Damb*c0/(1-tLi)./tauc./I.*(epsc.*Lc+epss.*Ls)+...                    (epss.^2./epsc.^2-taus./tauc).*Ls.^2);            otherwise                error('Unrecognized CathodeType. Nothing calculated.')        end    case 'UR'  % full cell with UR-type anode (e.g. graphite)        switch CathodeType            case 'UR'  % UR-type cathode, e.g. NMC                Lpz = -3/2*epss./epsc.*Ls-3/2*epsa./epsc.*La+sqrt(max(0,(...                    6*F*Damb*c0/(1-tLi)./tauc./I.*(epsc.*Lc+epss.*Ls+epsa.*La)+...                    (9/4*epss.^2./epsc.^2-3*taus./tauc).*Ls.^2+...                    (9/2*epss.*epsa./epsc.^2-6*epsa.*taus./epss./tauc).*Ls.*La+...                    (9/4*epsa.^2./epsc.^2-2*taua./tauc).*La.^2)));            case 'MZR' % MZR-type cathode, e.g. LFP                Lpz = -epss./epsc.*Ls-epsa./epsc.*La+sqrt(max(0,(...                    2*F*Damb*c0/(1-tLi)./tauc./I.*(epsc.*Lc+epss.*Ls+epsa.*La)+...                    (epss.^2./epsc.^2-taus./tauc).*Ls.^2+...                    2*(epss.*epsa./epsc.^2-epsa.*taus./epss./tauc).*Ls.*La+...                    (epsa.^2./epsc.^2-2/3*taua./tauc).*La.^2)));            otherwise                error('Unrecognized CathodeType. Nothing calculated.');        end    case 'MZR'  % full cell with MZR-type anode (e.g. LTO)        Cv = -F*Damb*c0/(1-tLi)./I.*(epsc.*Lc+epss.*Ls+epsa.*La)+(Ls/2+epsa./epss.*La).*taus.*Ls;        switch CathodeType            case 'UR'  % UR-type cathode, e.g. NMC                Av = tauc/6 - taua.*(csmaxc-cs0c)^2.*(1-epsc).^2./(2.*cs0a^2.*(1-epsa).^2);                Bv = taua.*La.*(csmaxc-cs0c).*(1-epsc)./(cs0a.*(1-epsa))+...                    tauc./(2*epsc).*(epss.*Ls+epsa.*La);                Lpz = (-Bv + sqrt(Bv.^2-4*Av.*Cv))./Av/2;            case 'MZR'  % MZR-type cathode, e.g. LFP                Av = tauc/2 - taua.*(csmaxc-cs0c)^2.*(1-epsc).^2./(2.*cs0a^2.*(1-epsa).^2);                Bv = taua.*La.*(csmaxc-cs0c).*(1-epsc)./(cs0a.*(1-epsa))+...                    tauc./epsc.*(epss.*Ls+epsa.*La);                Lpz = (-Bv + sqrt(Bv.^2-4*Av.*Cv))./Av/2;            otherwise                error('Unrecognized CathodeType. Nothing calculated.');        end    otherwise        error('Unrecognized AnodeType. Nothing calculated.');end% Calculate DoDfDoDf = max(0, min(1, Lpz./Lc));end